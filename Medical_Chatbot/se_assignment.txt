import React, { useState, useEffect, useRef } from 'react';
import { Send, Mic, MicOff, Loader, User, Bot } from 'lucide-react';
import ReactMarkdown from 'react-markdown';

const Chatbot = () => {
  const [messages, setMessages] = useState([
    { id: 1, text: "Hello! I'm your medical assistant. How can I help you today?", sender: 'bot' }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const messagesEndRef = useRef(null);
  const recognition = useRef(null);

  // Initialize speech recognition
  useEffect(() => {
    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition.current = new SpeechRecognition();
      recognition.current.continuous = false;
      recognition.current.interimResults = false;
      
      recognition.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
      };
      
      recognition.current.onend = () => {
        setIsListening(false);
      };
    }
  }, []);

  // Auto scroll to bottom of messages
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleInputChange = (e) => {
    setInput(e.target.value);
  };

  const toggleListening = () => {
    if (!recognition.current) {
      alert('Speech recognition is not supported in your browser.');
      return;
    }
    
    if (isListening) {
      recognition.current.stop();
      setIsListening(false);
    } else {
      recognition.current.start();
      setIsListening(true);
    }
  };

  const sendMessage = async (e) => {
    e?.preventDefault();
    
    if (!input.trim()) return;
    
    const userMessage = { id: Date.now(), text: input, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    
    try {
      const response = await fetch('http://localhost:5000/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query: input }),
      });
      
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      
      const data = await response.json();
      
      setMessages(prev => [
        ...prev, 
        { id: Date.now(), text: data.response, sender: 'bot' }
      ]);
    } catch (error) {
      console.error('Error:', error);
      setMessages(prev => [
        ...prev, 
        { id: Date.now(), text: "I'm sorry, I encountered an error processing your request. Please try again.", sender: 'bot' }
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-blue-50 to-teal-50">
      {/* Header */}
      <header className="bg-white shadow-md p-4">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Bot className="text-blue-600" size={24} />
            <span className="font-bold text-xl text-gray-800">MediAssist Chat</span>
          </div>
          <nav className="hidden md:flex space-x-6">
            <a href="/" className="text-gray-700 hover:text-blue-600 font-medium">Home</a>
          </nav>
        </div>
      </header>

      {/* Chat Container */}
      <div className="flex-1 overflow-hidden flex flex-col p-4 md:p-6">
        <div className="bg-white rounded-xl shadow-lg flex-1 flex flex-col overflow-hidden">
          {/* Messages Area */}
          <div className="flex-1 overflow-y-auto p-4">
            <div className="space-y-4">
              {messages.map((message) => (
                <div 
                  key={message.id} 
                  className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div 
                    className={`max-w-3/4 p-4 rounded-xl ${
                      message.sender === 'user' 
                        ? 'bg-blue-600 text-white rounded-tr-none' 
                        : 'bg-gray-100 text-gray-800 rounded-tl-none'
                    }`}
                  >
                    <div className="flex items-center gap-2 mb-2">
                      {message.sender === 'user' ? (
                        <User size={16} className="text-blue-200" />
                      ) : (
                        <Bot size={16} className="text-blue-600" />
                      )}
                      <span className="font-medium">
                        {message.sender === 'user' ? 'You' : 'MediAssist'}
                      </span>
                    </div>
                    {message.sender === 'bot' ? (
                      <div className="prose prose-sm max-w-none">
                        <ReactMarkdown>
                          {message.text}
                        </ReactMarkdown>
                      </div>
                    ) : (
                      <p>{message.text}</p>
                    )}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 text-gray-800 p-4 rounded-xl rounded-tl-none max-w-3/4">
                    <div className="flex items-center gap-2">
                      <Bot size={16} className="text-blue-600" />
                      <span className="font-medium">MediAssist</span>
                    </div>
                    <div className="flex items-center gap-2 mt-2">
                      <Loader size={16} className="animate-spin text-blue-600" />
                      <span>Thinking...</span>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
          </div>
          
          {/* Input Area */}
          <div className="p-4 border-t">
            <form onSubmit={sendMessage} className="flex gap-2">
              <button 
                type="button"
                onClick={toggleListening}
                className={`p-2 rounded-full ${
                  isListening 
                    ? 'bg-red-500 text-white hover:bg-red-600' 
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
                title={isListening ? "Stop listening" : "Start speech recognition"}
              >
                {isListening ? <MicOff size={20} /> : <Mic size={20} />}
              </button>
              <input
                type="text"
                value={input}
                onChange={handleInputChange}
                placeholder="Type your health question here..."
                className="flex-1 border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={isLoading}
              />
              <button
                type="submit"
                className="bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700 transition"
                disabled={isLoading || !input.trim()}
              >
                <Send size={20} />
              </button>
            </form>
            <div className="text-xs text-gray-500 mt-2 text-center">
              Press the microphone button to use speech-to-text functionality
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chatbot;

Backend
--------

from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import requests
import markdown
import os
import sqlite3
import json
from datetime import datetime
import google.generativeai as genai

app = Flask(__name__)
CORS(app)

OLLAMA_API_URL = "http://localhost:11434/api/generate"
OLLAMA_MODEL = "medibot:latest"

GEMINI_API_KEY = "AIzaSyDVqbcDnKf-mJncF4efQMzLHboJ5iu-5V0"
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-2.0-flash')

def get_db_connection():
    conn = sqlite3.connect('medical_chat.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    conn.execute('''
    CREATE TABLE IF NOT EXISTS conversations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        query TEXT NOT NULL,
        response TEXT NOT NULL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        rouge1 REAL,
        rouge2 REAL,
        rougeL REAL,
        bleu REAL
    )
    ''')
    conn.commit()
    conn.close()

init_db()

def evaluate_response(query, response):
    """Use Gemini to evaluate the response with ROUGE and BLEU scores"""
    prompt = f"""
    Evaluate the following AI response to a medical query using ROUGE-1, ROUGE-2, ROUGE-L, and BLEU scores.
    
    User Query: {query}
    AI Response: {response}
    
    Calculate and provide only the numerical scores (between 0 and 1) in this exact format:
    ROUGE-1: [score]
    ROUGE-2: [score]
    ROUGE-L: [score]
    BLEU: [score]
    
    Do not include any other text or explanations.
    """
    
    try:
        result = gemini_model.generate_content(prompt)
        evaluation_text = result.text
        
        scores = {}
        for line in evaluation_text.strip().split('\n'):
            if ':' in line:
                metric, value = line.split(':', 1)
                metric = metric.strip()
                try:
                    value = float(value.strip())
                    scores[metric] = value
                except ValueError:
                    continue
        
        return {
            'rouge1': scores.get('ROUGE-1', None),
            'rouge2': scores.get('ROUGE-2', None),
            'rougeL': scores.get('ROUGE-L', None),
            'bleu': scores.get('BLEU', None)
        }
    except Exception as e:
        app.logger.error(f"Error evaluating response with Gemini: {str(e)}")
        return {
            'rouge1': None,
            'rouge2': None,
            'rougeL': None,
            'bleu': None
        }

@app.route('/')
def index():
    conn = get_db_connection()
    conversations = conn.execute('SELECT * FROM conversations ORDER BY timestamp DESC').fetchall()
    conn.close()
    return render_template('index.html', conversations=conversations)

@app.route('/api/chat', methods=['POST'])
def chat():
    data = request.json
    if not data or 'query' not in data:
        return jsonify({'error': 'No query provided'}), 400
    
    user_query = data['query']
    
    prompt = f"""You are a helpful medical assistant chatbot. You provide general medical information but always remind users that they should consult with a healthcare professional for specific medical advice or emergencies.

User query: {user_query}

Please provide a helpful, accurate response with medical information.
Format your response using Markdown for better readability."""

    try:
        response = requests.post(
            OLLAMA_API_URL,
            json={
                "model": OLLAMA_MODEL,
                "prompt": prompt,
                "stream": False
            },
            timeout=30
        )
        
        response.raise_for_status()
        result = response.json()
        
        generated_text = result.get('response', '')
        
        # Evaluate the response using Gemini
        evaluation = evaluate_response(user_query, generated_text)
        
        # Store in database
        conn = get_db_connection()
        conn.execute(
            'INSERT INTO conversations (query, response, rouge1, rouge2, rougeL, bleu) VALUES (?, ?, ?, ?, ?, ?)',
            (user_query, generated_text, evaluation['rouge1'], evaluation['rouge2'], evaluation['rougeL'], evaluation['bleu'])
        )
        conn.commit()
        conn.close()
        
        return jsonify({
            'response': generated_text,
            'evaluation': evaluation,
            'status': 'success'
        })
        
    except requests.exceptions.RequestException as e:
        app.logger.error(f"Error communicating with Ollama: {str(e)}")
        return jsonify({
            'response': "I'm having trouble connecting to my knowledge base right now. Please try again later.",
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'ok'})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)

index page
----------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medical Chatbot Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .conversation-card {
            margin-bottom: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .query {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 10px 10px 0 0;
        }
        .response {
            padding: 15px;
            background-color: #fff;
        }
        .metrics {
            background-color: #e9ecef;
            padding: 10px 15px;
            border-radius: 0 0 10px 10px;
            font-size: 0.9rem;
        }
        .metric-value {
            font-weight: bold;
        }
        .timestamp {
            font-size: 0.8rem;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1 class="mb-4">Medical Chatbot Conversations</h1>
        
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Chat with Medical Bot</h5>
                    </div>
                    <div class="card-body">
                        <form id="chat-form">
                            <div class="mb-3">
                                <label for="query" class="form-label">Your medical question:</label>
                                <textarea class="form-control" id="query" rows="3" required></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </form>
                        <div id="response-container" class="mt-3 d-none">
                            <h6>Response:</h6>
                            <div id="response-text" class="p-3 bg-light rounded"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>About Evaluation Metrics</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>ROUGE-1:</strong> Measures unigram overlap between the response and reference.</p>
                        <p><strong>ROUGE-2:</strong> Measures bigram overlap between the response and reference.</p>
                        <p><strong>ROUGE-L:</strong> Measures the longest common subsequence between the response and reference.</p>
                        <p><strong>BLEU:</strong> Measures precision of n-grams in the response compared to reference.</p>
                        <p class="text-muted">All scores range from 0 to 1, with higher values indicating better quality.</p>
                    </div>
                </div>
            </div>
        </div>
        
        <h2 class="mb-3">Previous Conversations</h2>
        
        {% if conversations %}
            {% for conv in conversations %}
                <div class="conversation-card">
                    <div class="query">
                        <h5>Query:</h5>
                        <p>{{ conv.query }}</p>
                        <small class="timestamp">{{ conv.timestamp }}</small>
                    </div>
                    <div class="response">
                        <h5>Response:</h5>
                        <div>{{ conv.response|safe }}</div>
                    </div>
                    <div class="metrics">
                        <div class="row">
                            <div class="col-md-3">
                                <span>ROUGE-1: <span class="metric-value">{{ "%.3f"|format(conv.rouge1) if conv.rouge1 else "N/A" }}</span></span>
                            </div>
                            <div class="col-md-3">
                                <span>ROUGE-2: <span class="metric-value">{{ "%.3f"|format(conv.rouge2) if conv.rouge2 else "N/A" }}</span></span>
                            </div>
                            <div class="col-md-3">
                                <span>ROUGE-L: <span class="metric-value">{{ "%.3f"|format(conv.rougeL) if conv.rougeL else "N/A" }}</span></span>
                            </div>
                            <div class="col-md-3">
                                <span>BLEU: <span class="metric-value">{{ "%.3f"|format(conv.bleu) if conv.bleu else "N/A" }}</span></span>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <div class="alert alert-info">No conversations yet. Start chatting with the medical bot!</div>
        {% endif %}
    </div>

    <script>
        document.getElementById('chat-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const query = document.getElementById('query').value;
            const responseContainer = document.getElementById('response-container');
            const responseText = document.getElementById('response-text');
            
            responseContainer.classList.remove('d-none');
            responseText.innerHTML = 'Loading...';
            
            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query })
                });
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    // Convert markdown to HTML
                    const converter = new showdown.Converter();
                    const html = converter.makeHtml(data.response);
                    responseText.innerHTML = html;
                    
                    // Refresh the page after a short delay to show the new conversation
                    setTimeout(() => {
                        window.location.reload();
                    }, 3000);
                } else {
                    responseText.innerHTML = `<div class="alert alert-danger">${data.response}</div>`;
                }
            } catch (error) {
                responseText.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/showdown@2.1.0/dist/showdown.min.js"></script>
</body>
</html>
